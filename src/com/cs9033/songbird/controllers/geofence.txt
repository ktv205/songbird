package com.cs9033.songbird.controllers;

import java.util.ArrayList;
import java.util.List;

import com.cs9033.songbird.R;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationClient.OnAddGeofencesResultListener;
import com.google.android.gms.location.LocationStatusCodes;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.model.CameraPosition;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class GeoFences extends Activity implements ConnectionCallbacks,
		OnConnectionFailedListener, OnAddGeofencesResultListener {
	//MapView mapView;
	//GoogleMap map;
	LocationClient mLocationClient;
	private static final long SECONDS_PER_HOUR = 60;
	private static final long MILLISECONDS_PER_SECOND = 1000;
	private static final long GEOFENCE_EXPIRATION_IN_HOURS = 12;
	private static final long GEOFENCE_EXPIRATION_TIME = GEOFENCE_EXPIRATION_IN_HOURS
			* SECONDS_PER_HOUR * MILLISECONDS_PER_SECOND;
	// private static final REQUEST_TYPE ADD = null;
	private EditText mLatitude1;
	// Handle to geofence 1 longitude in the UI
	private EditText mLongitude1;
	// Handle to geofence 1 radius in the UI
	private EditText mRadius1;
	// Handle to geofence 2 latitude in the UI
	private EditText mLatitude2;
	// Handle to geofence 2 longitude in the UI
	private EditText mLongitude2;
	// Handle to geofence 2 radius in the UI
	private EditText mRadius2;
	/*
	 * Internal geofence objects for geofence 1 and 2
	 */
	private SimpleGeofence mUIGeofence1;
	private SimpleGeofence mUIGeofence2;
	// Internal List of Geofence objects
	List<Geofence> mGeofenceList;
	// Persistent storage for geofences
	private PendingIntent mGeofenceRequestIntent;

	// Defines the allowable request types.
	public enum REQUEST_TYPE {
		ADD
	};

	private REQUEST_TYPE mRequestType;
	// Flag that indicates if a request is underway.
	private boolean mInProgress;
	private SimpleGeofenceStore mGeofenceStorage;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// setContentView(R.layout.acitivity_geofences);
		setContentView(R.layout.fields_geofence);
		mInProgress = false;
		// mapView = (MapView) findViewById(R.id.mapView);
		//mapView.onCreate(savedInstanceState);
		//map = mapView.getMap();
		//map.setMyLocationEnabled(true);
		mLocationClient = new LocationClient(this, this, this);
		mGeofenceStorage = new SimpleGeofenceStore(this);
		mLatitude1 = (EditText) findViewById(R.id.latitude1_fields);
		mLongitude1 = (EditText) findViewById(R.id.longitude1_fields);
		mRadius1 = (EditText) findViewById(R.id.radius1_fields);
		mLatitude2 = (EditText) findViewById(R.id.latitude2_fields);
		mLongitude2 = (EditText) findViewById(R.id.longitude2_fields);
		mRadius2 = (EditText) findViewById(R.id.radius2_fields);
		Button button = (Button) findViewById(R.id.button_fields);
		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				createGeofences();
				addGeofences();

			}
		});
		

		// Instantiate the current List of geofences
		mGeofenceList = new ArrayList<Geofence>();
		/*
		 * Handles to UI views containing geofence data
		 */
		// Handle to geofence 1 latitude in the UI

	}

	public void addGeofences() {
		// Start a request to add geofences
		// mRequestType = ADD;
		/*
		 * Test for Google Play services after setting the request type. If
		 * Google Play services isn't present, the proper request can be
		 * restarted.
		 */
		/*
		 * Create a new location client object. Since the current activity class
		 * implements ConnectionCallbacks and OnConnectionFailedListener, pass
		 * the current activity object as the listener for both parameters
		 */
		// If a request is not already underway
		if (!mInProgress) {
			// Indicate that a request is underway
			mInProgress = true;
			// Request a connection from the client to Location Services
			mLocationClient.connect();
		} else {
			/*
			 * A request is already underway. You can handle this situation by
			 * disconnecting the client, re-setting the flag, and then re-trying
			 * the request.
			 */
		}
	}

	public void createGeofences() {
		/*
		 * Create an internal object to store the data. Set its ID to "1". This
		 * is a "flattened" object that contains a set of strings
		 */
		mUIGeofence1 = new SimpleGeofence("1", Double.valueOf(mLatitude1
				.getText().toString()), Double.valueOf(mLongitude1.getText()
				.toString()), Float.valueOf(mRadius1.getText().toString()),
				GEOFENCE_EXPIRATION_TIME,
				// This geofence records only entry transitions
				Geofence.GEOFENCE_TRANSITION_ENTER);
		// Store this flat version
		mGeofenceStorage.setGeofence("1", mUIGeofence1);
		// Create another internal object. Set its ID to "2"
		mUIGeofence2 = new SimpleGeofence("2", Double.valueOf(mLatitude2
				.getText().toString()), Double.valueOf(mLongitude2.getText()
				.toString()), Float.valueOf(mRadius2.getText().toString()),
				GEOFENCE_EXPIRATION_TIME,
				// This geofence records both entry and exit transitions
				Geofence.GEOFENCE_TRANSITION_ENTER
						| Geofence.GEOFENCE_TRANSITION_EXIT);
		// Store this flat version
		mGeofenceStorage.setGeofence(String.valueOf(2), mUIGeofence2);
		mGeofenceList.add(mUIGeofence1.toGeofence());
		mGeofenceList.add(mUIGeofence2.toGeofence());
	}

	private PendingIntent getTransitionPendingIntent() {
		// Create an explicit Intent
		Intent intent = new Intent(this, ReceiveTransitionsIntentService.class);
		/*
		 * Return the PendingIntent
		 */
		return PendingIntent.getService(this, 0, intent,
				PendingIntent.FLAG_UPDATE_CURRENT);
	}

	@Override
	protected void onStart() {
		super.onStart();

	}

	@Override
	protected void onRestart() {
		// TODO Auto-generated method stub
		super.onRestart();
	}

	@Override
	protected void onResume() {
		super.onResume();
		//mapView.onResume();
	}

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		super.onStop();

	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		//mapView.onDestroy();
	}

	@Override
	public void onLowMemory() {
		super.onLowMemory();
		//mapView.onLowMemory();
	}

	@Override
	public void onConnected(Bundle arg0) {
		Toast.makeText(this, "connected", Toast.LENGTH_SHORT).show();
		mGeofenceRequestIntent = getTransitionPendingIntent();
		// Send a request to add the current geofences
		mLocationClient.addGeofences(mGeofenceList, mGeofenceRequestIntent,
				this);

	}

	@Override
	public void onDisconnected() {
		mInProgress = false;
		// Destroy the current location client
		mLocationClient = null;

	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub

	}

	public class SimpleGeofence {
		private String mId;
		private double mLatitude;
		private double mLongitude;
		private float mRadius;
		private long mExpirationDuration;
		private int mTransitionType;

		public SimpleGeofence(String geofenceId, double latitude,
				double longitude, float radius, long expiration, int transition) {
			// Set the instance fields from the constructor
			this.mId = geofenceId;
			this.mLatitude = latitude;
			this.mLongitude = longitude;
			this.mRadius = radius;
			this.mExpirationDuration = expiration;
			this.mTransitionType = transition;
		}

		public String getmId() {
			return mId;
		}

		public void setmId(String mId) {
			this.mId = mId;
		}

		public double getmLatitude() {
			return mLatitude;
		}

		public void setmLatitude(double mLatitude) {
			this.mLatitude = mLatitude;
		}

		public double getmLongitude() {
			return mLongitude;
		}

		public void setmLongitude(double mLongitude) {
			this.mLongitude = mLongitude;
		}

		public float getmRadius() {
			return mRadius;
		}

		public void setmRadius(float mRadius) {
			this.mRadius = mRadius;
		}

		public long getmExpirationDuration() {
			return mExpirationDuration;
		}

		public void setmExpirationDuration(long mExpirationDuration) {
			this.mExpirationDuration = mExpirationDuration;
		}

		public int getmTransitionType() {
			return mTransitionType;
		}

		public void setmTransitionType(int mTransitionType) {
			this.mTransitionType = mTransitionType;
		}

		public Geofence toGeofence() {
			return new Geofence.Builder()
					.setRequestId(getmId())
					.setTransitionTypes(mTransitionType)
					.setCircularRegion(getmLatitude(), getmLongitude(),
							getmRadius())
					.setExpirationDuration(mExpirationDuration).build();
		}
	}

	public class SimpleGeofenceStore {
		// Keys for flattened geofences stored in SharedPreferences
		public static final String KEY_LATITUDE = "com.example.android.geofence.KEY_LATITUDE";
		public static final String KEY_LONGITUDE = "com.example.android.geofence.KEY_LONGITUDE";
		public static final String KEY_RADIUS = "com.example.android.geofence.KEY_RADIUS";
		public static final String KEY_EXPIRATION_DURATION = "com.example.android.geofence.KEY_EXPIRATION_DURATION";
		public static final String KEY_TRANSITION_TYPE = "com.example.android.geofence.KEY_TRANSITION_TYPE";
		// The prefix for flattened geofence keys
		public static final String KEY_PREFIX = "com.example.android.geofence.KEY";

		public String getKeyLatitude() {
			return KEY_LATITUDE;
		}

		public String getKeyLongitude() {
			return KEY_LONGITUDE;
		}

		public String getKeyRadius() {
			return KEY_RADIUS;
		}

		public String getKeyExpirationDuration() {
			return KEY_EXPIRATION_DURATION;
		}

		public String getKeyTransitionType() {
			return KEY_TRANSITION_TYPE;
		}

		public String getKeyPrefix() {
			return KEY_PREFIX;
		}

		/*
		 * Invalid values, used to test geofence storage when retrieving
		 * geofences
		 */
		public static final long INVALID_LONG_VALUE = -999l;
		public static final float INVALID_FLOAT_VALUE = -999.0f;
		public static final int INVALID_INT_VALUE = -999;
		// The SharedPreferences object in which geofences are stored
		private final SharedPreferences mPrefs;
		// The name of the SharedPreferences
		private static final String SHARED_PREFERENCES = "SharedPreferences";

		// Create the SharedPreferences storage with private access only
		public SimpleGeofenceStore(Context context) {
			mPrefs = context.getSharedPreferences(SHARED_PREFERENCES,
					Context.MODE_PRIVATE);
		}

		public SimpleGeofence getGeoFence(String id) {
			// Get the latitude for the geofence identified by id, or
			// INVALID_FLOAT_VALUE if it doesn't
			// exist (similarly for the other values that follow).
			double lat = mPrefs.getFloat(getGeofenceFieldKey(id, KEY_LATITUDE),
					INVALID_FLOAT_VALUE);
			double lng = mPrefs
					.getFloat(getGeofenceFieldKey(id, KEY_LONGITUDE),
							INVALID_FLOAT_VALUE);
			float radius = mPrefs.getFloat(getGeofenceFieldKey(id, KEY_RADIUS),
					INVALID_FLOAT_VALUE);
			long expirationDuration = mPrefs.getLong(
					getGeofenceFieldKey(id, KEY_EXPIRATION_DURATION),
					INVALID_LONG_VALUE);
			int transitionType = mPrefs.getInt(
					getGeofenceFieldKey(id, KEY_TRANSITION_TYPE),
					INVALID_INT_VALUE);
			// If none of the values is incorrect, return the object.
			if (lat != INVALID_FLOAT_VALUE && lng != INVALID_FLOAT_VALUE
					&& radius != INVALID_FLOAT_VALUE
					&& expirationDuration != INVALID_LONG_VALUE
					&& transitionType != INVALID_INT_VALUE) {
				return new SimpleGeofence(id, lat, lng, radius,
						expirationDuration, transitionType);
			}
			// Otherwise, return null.
			return null;

		}

		public void setGeofence(String id, SimpleGeofence geofence) {
			// Get a SharedPreferences editor instance. Among other things,
			// SharedPreferences
			// ensures that updates are atomic and non-concurrent.
			SharedPreferences.Editor prefs = mPrefs.edit();
			// Write the Geofence values to SharedPreferences.
			prefs.putFloat(getGeofenceFieldKey(id, KEY_LATITUDE),
					(float) geofence.getmLatitude());
			prefs.putFloat(getGeofenceFieldKey(id, KEY_LONGITUDE),
					(float) geofence.getmLongitude());
			prefs.putFloat(getGeofenceFieldKey(id, KEY_RADIUS),
					geofence.getmRadius());
			prefs.putLong(getGeofenceFieldKey(id, KEY_EXPIRATION_DURATION),
					geofence.getmExpirationDuration());
			prefs.putInt(getGeofenceFieldKey(id, KEY_TRANSITION_TYPE),
					geofence.getmTransitionType());
			// Commit the changes.
			prefs.commit();
		}

		/**
		 * Remove a flattened geofence object from storage by removing all of
		 * its keys.
		 */
		public void clearGeofence(String id) {
			SharedPreferences.Editor prefs = mPrefs.edit();
			prefs.remove(getGeofenceFieldKey(id, KEY_LATITUDE));
			prefs.remove(getGeofenceFieldKey(id, KEY_LONGITUDE));
			prefs.remove(getGeofenceFieldKey(id, KEY_RADIUS));
			prefs.remove(getGeofenceFieldKey(id, KEY_EXPIRATION_DURATION));
			prefs.remove(getGeofenceFieldKey(id, KEY_TRANSITION_TYPE));
			prefs.commit();
		}

		/**
		 * Given a Geofence object's ID and the name of a field (for example,
		 * KEY_LATITUDE), return the key name of the object's values in
		 * SharedPreferences.
		 * 
		 * @param id
		 *            The ID of a Geofence object.
		 * @param fieldName
		 *            The field represented by the key.
		 * @return The full key name of a value in SharedPreferences.
		 */
		private String getGeofenceFieldKey(String id, String fieldName) {
			return KEY_PREFIX + "_" + id + "_" + fieldName;
		}

	}

	@Override
	public void onAddGeofencesResult(int arg0, String[] arg1) {
		Log.d("onAddGeofencesResult", "result");
		// If adding the geofences was successful
		if (LocationStatusCodes.SUCCESS == arg0) {
			Log.d("success", arg0 + "");
			/*
			 * Handle successful addition of geofences here. You can send out a
			 * broadcast intent or update the UI. geofences into the Intent's
			 * extended data.
			 */
		} else {
			// If adding the geofences failed
			/*
			 * Report errors here. You can log the error using Log.e() or update
			 * the UI.
			 */
		}
		// Turn off the in progress flag and disconnect the client
		mInProgress = false;
		mLocationClient.disconnect();

	}
}
